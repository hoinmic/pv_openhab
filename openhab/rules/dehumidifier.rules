val logName = "dehumidifier"

var Timer timer = null

val MAX_HUMIDITY_STARTUP = 68
val DEHUMIDIFIER_ON_TIME_MIN = 30

rule "Dehumidifier Startup"
when
  System started
then
  maxHumidity.postUpdate(MAX_HUMIDITY_STARTUP)
  mystrom_switch.sendCommand(OFF)
end

rule "Dehumidifier with Timeout"
when
  Item shellyHT_humid changed or    // measured humidity changed
  Item maxHumidity changed or       // max humidity changed
  Item mystrom_switch changed       // timer exeeded / UI modification
then
  if (shellyHT_humid.state >= maxHumidity.state)
  {
    mystrom_switch.sendCommand(ON)
    logInfo(logName, "Dehumidifier ON. Humidity: " + shellyHT_humid.state)

    if (timer !== null) {
      logInfo(logName, "Timer rescheduled")
      timer.reschedule(now.plusMinutes(DEHUMIDIFIER_ON_TIME_MIN))
    } else {
      timer = createTimer(now.plusMinutes(DEHUMIDIFIER_ON_TIME_MIN), [ |
        mystrom_switch.sendCommand(OFF)
        logInfo(logName, "Timer expiration")
        timer = null
      ])
      logInfo(logName, "Timer created")
    }
  }
end
