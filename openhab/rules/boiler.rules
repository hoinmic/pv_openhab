val logName = "boiler"

var boiler_low_on_time = 0
var boiler_high_on_time = 0

var minimum_boiler_low_on_time = 0
var minimum_boiler_high_on_time = 0

rule "Boiler Startup"
when
  System started
then
  boiler_phase1_switch.sendCommand(OFF)
  boiler_phase2_switch.sendCommand(OFF)
  boiler_phase3_switch.sendCommand(OFF)
end

rule "Calculate the boiler times"
when
  System started or
  Item monthOfTheYear changed
then
  minimum_boiler_low_on_time = 15
  minimum_boiler_high_on_time = 5

  if(monthOfTheYear.state.toString == "DECEMBER")
  {
    minimum_boiler_low_on_time = 60
    minimum_boiler_high_on_time = 10
  }

  if((monthOfTheYear.state.toString == "NOVEMBER") ||
     (monthOfTheYear.state.toString == "JANUARY"))
  {
    minimum_boiler_low_on_time = 30
    minimum_boiler_high_on_time = 5
  }

  logInfo(logName, "minimum_boiler_low_on_time: " + minimum_boiler_low_on_time)
  logInfo(logName, "minimum_boiler_high_on_time: " + minimum_boiler_high_on_time)
end

rule "Boiler Switch"
when
  Item boiler_33_percent_trigger changed or     // state change
  Item boiler_100_percent_trigger changed or    // state change
  Time cron "0 0/1 * * * ?"                     // every minute
then
  if (boiler_33_percent_trigger.state == ON ||
      boiler_100_percent_trigger.state == ON)
  {
    // Turn phase 1+2 on
    //logInfo(logName, "Boiler phase 1+2 ON")
    boiler_phase1_switch.sendCommand(ON)
    boiler_phase2_switch.sendCommand(ON)

    // Turn phase 3 on
    if (boiler_100_percent_trigger.state == ON)
    {
      //logInfo(logName, "Boiler phase 3 ON")
      boiler_phase3_switch.sendCommand(ON)
    }
  }

  if (boiler_33_percent_trigger.state == OFF &&
      boiler_low_on_time >= minimum_boiler_low_on_time &&
      boiler_high_on_time == 0)
  {
    //logInfo(logName, "Boiler phase 1+2+3 OFF")
    boiler_phase1_switch.sendCommand(OFF)
    boiler_phase2_switch.sendCommand(OFF)
    boiler_phase3_switch.sendCommand(OFF)
  }

  if (boiler_100_percent_trigger.state == OFF &&
      boiler_high_on_time >= minimum_boiler_high_on_time)
  {
    //logInfo(logName, "Boiler phase 3 OFF")
    boiler_phase3_switch.sendCommand(OFF)
  }
end

rule "Boiler Timekeeping"
when
  Time cron "0 0/1 * * * ?"                     // every minute
then
  if (boiler_phase1_switch.state.toString == "ON")
  {
    boiler_low_on_time = boiler_low_on_time + 1
  }
  else
  {
    boiler_low_on_time = 0
  }
  //logInfo(logName, "boiler_low_on_time: " + boiler_low_on_time)

  if (boiler_phase3_switch.state.toString == "ON")
  {
    boiler_high_on_time = boiler_high_on_time + 1
  }
  else
  {
    boiler_high_on_time = 0
  }
  //logInfo(logName, "boiler_high_on_time: " + boiler_high_on_time)
end
