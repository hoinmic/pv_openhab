val logName = "boiler"

var Timer timer_low = null
var Timer timer_high = null

val BOILER_LOW_ON_TIME_MIN = 30
val BOILER_HIGH_ON_TIME_MIN = 5

rule "Boiler Startup"
when
  System started
then
  boiler_phase1_switch.sendCommand(OFF)
  boiler_phase2_switch.sendCommand(OFF)
  boiler_phase3_switch.sendCommand(OFF)
end

rule "Boiler with Timeout"
when
  Item boiler_33_percent_trigger changed or     // state change
  Item boiler_100_percent_trigger changed or    // state change
  Time cron "0 0/1 * * * ?"                     // every minute
then
  if (boiler_33_percent_trigger.state == ON ||
      boiler_100_percent_trigger.state == ON)
  {
    // Turn phase 1+2 on
    boiler_phase1_switch.sendCommand(ON)
    boiler_phase2_switch.sendCommand(ON)
    //logInfo(logName, "Boiler phase 1+2 ON")

    if (timer_low !== null) {
      //logInfo(logName, "Timer phase 1+2 rescheduled")
      timer_low.reschedule(now.plusMinutes(BOILER_LOW_ON_TIME_MIN))
    } else {
      timer_low = createTimer(now.plusMinutes(BOILER_LOW_ON_TIME_MIN), [ |
        boiler_phase1_switch.sendCommand(OFF)
        boiler_phase2_switch.sendCommand(OFF)
        //logInfo(logName, "Timer phase 1+2 expiration")
        timer_low = null
      ])
      //logInfo(logName, "Timer phase 1+2 created")
    }

    // Turn phase 3 on
    if (boiler_100_percent_trigger.state == ON)
    {
      boiler_phase3_switch.sendCommand(ON)
      //logInfo(logName, "Boiler phase 3 ON")

      if (timer_high !== null) {
        //logInfo(logName, "Timer phase 3 rescheduled")
        timer_high.reschedule(now.plusMinutes(BOILER_HIGH_ON_TIME_MIN))
      } else {
        timer_high = createTimer(now.plusMinutes(BOILER_HIGH_ON_TIME_MIN), [ |
          boiler_phase3_switch.sendCommand(OFF)
          //logInfo(logName, "Timer phase 3 expiration")
          timer_high = null
        ])
        //logInfo(logName, "Timer phase 3 created")
      }
    }
  }
end
