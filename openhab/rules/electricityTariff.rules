val logName = "electricityTariff"

val KWH_HIGH_TARIFF_RETURNED_GRID  = 0.19
val KWH_LOW_TARIFF_RETURNED_GRID = 0.18

val KWH_HIGH_TARIFF_GRID  = 0.33
val KWH_LOW_TARIFF_GRID = 0.31

// Check low tariff
rule "calculate electricity tariff"
when
  System started or
  Time cron "0 0/10 * * * ?"   // every ten minutes
then
  var Number day = ZonedDateTime.now().getDayOfWeek().getValue()
  var Number hour = ZonedDateTime.now().getHour()

  // Low tariff of the electricity company
  var currentTariff = "HIGH"
  var currentPriceReturnedGrid = KWH_HIGH_TARIFF_RETURNED_GRID
  var currentPriceGrid = KWH_HIGH_TARIFF_GRID
  if (((day == 1) && ((hour < 7) || (hour >= 20))) ||  // Monday
      ((day == 2) && ((hour < 7) || (hour >= 20))) ||  // Thuesday
      ((day == 3) && ((hour < 7) || (hour >= 20))) ||  // Wednesday
      ((day == 4) && ((hour < 7) || (hour >= 20))) ||  // Thursday
      ((day == 5) && ((hour < 7) || (hour >= 20))) ||  // Friday
      ((day == 6) && ((hour < 7) || (hour >= 13))) ||  // Saturday
      ((day == 7)))                                    // Sunday
  {
    currentTariff = "LOW"
    currentPriceReturnedGrid = KWH_LOW_TARIFF_RETURNED_GRID
    currentPriceGrid = KWH_LOW_TARIFF_GRID
  }

  if(tariff.state != currentTariff)
  {
    // Publish the updated state
    //logInfo(logName, "Weekday: " + day + ", Hour: " + hour + ", Low Tariff: " + currentTariff)
    logInfo(logName, "Low Tariff: " + currentTariff)
    tariff.postUpdate(currentTariff)
    kWh_price_returned_grid.postUpdate(currentPriceReturnedGrid)
    kWh_price_consumption_grid.postUpdate(currentPriceGrid)
  }
end
