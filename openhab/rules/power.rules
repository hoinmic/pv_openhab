val logName = "power"

var Number moving_average_power_inverter
var Number moving_average_power_grid
var Number moving_average_power_consumption

val FORGETTING_FACTOR = 2

rule "Power Consumption Startup"
when
  System started
then
  filtered_power_inverter.postUpdate(0)
  filtered_power_grid.postUpdate(0)
  filtered_power_consumption.postUpdate(0)
  moving_average_power_inverter = 0
  moving_average_power_grid = 0
  moving_average_power_consumption = 0

  TestInverter.postUpdate(0)
  TestGrid.postUpdate(0)
end

rule "Total Power Consumption"
when
  Time cron "0/15 * * * * ?"                // every 15 seconds
then
  var Number Power_Inverter = 0
  if ((Shelly_Current_Power_Total_Inverter.state != NULL ) && (Shelly_Current_Power_Total_Inverter.state != UNDEF))
  {
    Power_Inverter = Shelly_Current_Power_Total_Inverter.state
    Power_Inverter = Power_Inverter * -1
  }
  if ( (TestInverter.state != NULL ) && (TestInverter.state != UNDEF) )
  {
    Power_Inverter = Power_Inverter + TestInverter.state
  }

  var Number Power_Power_Grid = 0
  if ((Shelly_Current_Power_Total_Grid.state != NULL) && (Shelly_Current_Power_Total_Grid.state != UNDEF))
  {
    Power_Power_Grid = Shelly_Current_Power_Total_Grid.state
  }
  if ( (TestGrid.state != NULL ) && (TestGrid.state != UNDEF) )
  {
    Power_Power_Grid = Power_Power_Grid + TestGrid.state
  }

  // Filter Power Inverter
  moving_average_power_inverter = moving_average_power_inverter - ( moving_average_power_inverter / FORGETTING_FACTOR ) + Power_Inverter
  filtered_power_inverter.postUpdate( moving_average_power_inverter / FORGETTING_FACTOR )

  // Filter Electricity Grid
  moving_average_power_grid = moving_average_power_grid - ( moving_average_power_grid / FORGETTING_FACTOR ) + Power_Power_Grid
  filtered_power_grid.postUpdate( moving_average_power_grid / FORGETTING_FACTOR )

  // Filter Electricity Consumption
  moving_average_power_consumption = moving_average_power_inverter + moving_average_power_grid
  filtered_power_consumption.postUpdate( moving_average_power_consumption / FORGETTING_FACTOR )

  // logInfo(logName, "moving_average_power_grid: " + moving_average_power_grid)
  // logInfo(logName, "moving_average_power_inverter: " + moving_average_power_inverter)
  // logInfo(logName, "moving_average_power_consumption: " + moving_average_power_consumption)

  // logInfo(logName, "filtered_power_inverter: " + filtered_power_inverter.state.toString)
  // logInfo(logName, "filtered_power_grid: " + filtered_power_grid.state.toString)
  // logInfo(logName, "filtered_power_consumption: " + filtered_power_consumption.state.toString)

  // Provide values for LaMetric
  LaMetric_Inverter.postUpdate((filtered_power_inverter.state as Number).intValue)
  LaMetric_Grid.postUpdate((filtered_power_grid.state as Number).intValue)
  LaMetric_Consumption.postUpdate((filtered_power_consumption.state as Number).intValue)
end
