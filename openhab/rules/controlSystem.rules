val logName = "controlSystem"

rule "Control System Startup"
when
  System started
then
  boiler_33_percent_trigger.postUpdate(OFF)
  boiler_100_percent_trigger.postUpdate(OFF)
  dehumidifier_trigger.postUpdate(OFF)
end

rule "Control System Boiler"
when
  Time cron "0 0/1 * * * ?"   // every minute
then
  var next_boiler_33_percent_trigger = "OFF"
  var next_boiler_100_percent_trigger = "OFF"

  //logInfo(logName, "Time of day: " + timeOfDay.state)
  
  // Morning sun + Afternoon sun (No switching on during food preparation at lunchtime)
  if((timeOfDay.state.toString == "MORNING_SUN") ||
     (timeOfDay.state.toString == "AFTERNOON_SUN") || (timeOfDay.state.toString == "EVENING_SUN"))
  {
    // Boiler OFF
    if((boiler_phase1_switch.state.toString == "OFF") &&
       (boiler_phase3_switch.state.toString == "OFF"))
    {
      if((filtered_power_grid.state as Number).intValue <= -1300)
      {
        // Turn boiler LOW on
        next_boiler_33_percent_trigger = "ON"
        next_boiler_100_percent_trigger = "OFF"
      }
    }

    // Boiler LOW Power
    if((boiler_phase1_switch.state.toString == "ON") &&
       (boiler_phase3_switch.state.toString == "OFF"))
    {
      if((filtered_power_grid.state as Number).intValue > 0)
      {
        // Turn boiler LOW off
        next_boiler_33_percent_trigger = "OFF"
        next_boiler_100_percent_trigger = "OFF"
      }

      if(((filtered_power_grid.state as Number).intValue <= 0) &&
         ((filtered_power_grid.state as Number).intValue > -4000))
      {
        // Continou boiler LOW
        next_boiler_33_percent_trigger = "ON"
        next_boiler_100_percent_trigger = "OFF"
      }

      if ((filtered_power_grid.state as Number).intValue <= -4000)
      {
        // Turn boiler HIGH on
        next_boiler_33_percent_trigger = "ON"
        next_boiler_100_percent_trigger = "ON"
      }
    }

    // Boiler High Power
    if((boiler_phase1_switch.state.toString == "ON") &&
       (boiler_phase3_switch.state.toString == "ON"))
    {
      if((filtered_power_grid.state as Number).intValue <= 0)
      {
        // Continue boiler HIGH 
        next_boiler_33_percent_trigger = "ON"
        next_boiler_100_percent_trigger = "ON"
      }
      else
      {
        // Turn boiler HIGH off
        next_boiler_33_percent_trigger = "ON"
        next_boiler_100_percent_trigger = "OFF"
      }
    }

    // Boiler Invalid state
    if((boiler_phase1_switch.state.toString == "OFF") &&
       (boiler_phase3_switch.state.toString == "ON"))
    {
        logInfo(logName, "Boiler invalid state")
        next_boiler_33_percent_trigger = "OFF"
        next_boiler_100_percent_trigger = "OFF"
    }
  }

  if((boiler_33_percent_trigger.state.toString != next_boiler_33_percent_trigger))
  { 
    logInfo(logName, "Boiler 33 percent trigger: " + next_boiler_33_percent_trigger)
    boiler_33_percent_trigger.postUpdate(next_boiler_33_percent_trigger)
  }
  if((boiler_100_percent_trigger.state.toString != next_boiler_100_percent_trigger))
  {
    logInfo(logName, "Boiler 100 percent trigger: " + next_boiler_100_percent_trigger)
    boiler_100_percent_trigger.postUpdate(next_boiler_100_percent_trigger)
  }
end

rule "Control System Dehumidifier"
when
  Time cron "0 0/1 * * * ?"   // every minute
then
  var next_dehumidifier_trigger = "OFF"

  // Small consumer that works efficiently when switched on for a long time (over the entire sunny day)
  if((timeOfDay.state.toString == "SUN_RISE") || (timeOfDay.state.toString == "MORNING_SUN") ||
     (timeOfDay.state.toString == "MIDDAY_SUN") || (timeOfDay.state.toString == "AFTERNOON_SUN") ||
     (timeOfDay.state.toString == "EVENING_SUN"))
  {
    next_dehumidifier_trigger = "ON"
  }

  if((dehumidifier_trigger.state().toString != next_dehumidifier_trigger))
  {
    logInfo(logName, "Dehumidifier trigger: " + next_dehumidifier_trigger)
    dehumidifier_trigger.postUpdate(next_dehumidifier_trigger)
  }
end

rule "Control Dishwasher"
when
  Time cron "0 0/1 * * * ?"   // every minute
then
  var next_dishwasher_trigger = "OFF"

  if(((filtered_power_grid.state as Number).intValue <= -1000) &&
      (dishwasherMachineStatus.state.toString == "SMART_START_READY"))
  {
    next_dishwasher_trigger = "ON"
  }

  if((dishwasher_trigger.state().toString != next_dishwasher_trigger))
  {
    logInfo(logName, "Dishwasher trigger: " + next_dishwasher_trigger)
    dishwasher_trigger.postUpdate(next_dishwasher_trigger)
  }
end

rule "Control Dishwasher"
when
  Time cron "0 0/1 * * * ?"   // every minute
then
  var next_washingmachine_trigger = "OFF"

  if(((filtered_power_grid.state as Number).intValue <= -1000) &&
      (washingMachineStatus.state.toString == "SMART_START_READY"))
  {
    next_washingmachine_trigger = "ON"
  }

  if((washingMachine_trigger.state().toString != next_washingmachine_trigger))
  {
    logInfo(logName, "Dishwasher trigger: " + next_washingmachine_trigger)
    washingMachine_trigger.postUpdate(next_washingmachine_trigger)
  }
end
