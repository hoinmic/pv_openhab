val logName = "energy"

var QuantityType<Energy> previous_energy_inverter
var QuantityType<Energy> previous_energy_grid
var QuantityType<Energy> previous_energy_grid_returned

rule "Energy Consumption Startup"
when
  System started
then
  previous_energy_inverter = 0|Wh
  previous_energy_grid = 0|Wh
  previous_energy_grid_returned = 0|Wh

  TestGrid_Energy.postUpdate(0)
  TestGrid_Energy_Returned.postUpdate(0)
  TestInverter_Energy.postUpdate(0)
end

rule "Tariff counter Reset"
when
  Item Reset_Tariff_Energy_Meter changed
then
  Energy_Returned_Grid_Low_Tariff.postUpdate(0)
  Energy_Returned_Grid_High_Tariff.postUpdate(0)
  Energy_Consumed_Grid_Low_Tariff.postUpdate(0)
  Energy_Consumed_Grid_High_Tariff.postUpdate(0)
end

rule "Day Energy Reset"
when
  Item Reset_Day_Energy_Meter changed or
  Time cron "0 0 0 * * ? *" // midnight
then
  Day_Energy_Inverter.postUpdate(0)
  Day_Energy_Grid.postUpdate(0)
  Day_Energy_Returned_Grid.postUpdate(0)
end

rule "Day Energy Self Consumption"
when
  System started or
  Item Day_Energy_Inverter changed or
  Item Day_Energy_Grid changed or
  Item Day_Energy_Returned_Grid changed
then
  Day_Energy_Household_Consumption.postUpdate((Day_Energy_Inverter.state as QuantityType<Energy>) +
                                               (Day_Energy_Grid.state as QuantityType<Energy>) -
                                               (Day_Energy_Returned_Grid.state as QuantityType<Energy>))
  Day_Energy_Self_Consumption.postUpdate((Day_Energy_Inverter.state as QuantityType<Energy>).doubleValue -
                                          (Day_Energy_Returned_Grid.state as QuantityType<Energy>).doubleValue)
end

rule "Day Energy Autonomy"
when
  System started or
  Item Day_Energy_Self_Consumption changed or
  Item Day_Energy_Household_Consumption changed or
  Item Day_Energy_Inverter changed
then
  Day_Degree_Of_Autonomy.postUpdate((Day_Energy_Self_Consumption.state as Number).doubleValue /
                                     (Day_Energy_Household_Consumption.state as Number).doubleValue *
                                      100)
  Day_Rate_Self_Consumption.postUpdate((Day_Energy_Self_Consumption.state as Number).doubleValue /
                                        (Day_Energy_Inverter.state as Number).doubleValue *
                                         100)
end

rule "Month Energy Reset"
when
  Item Reset_Month_Energy_Meter changed or
  Time cron "0 0 0 1 * ? *" // First day of month
then
  Month_Energy_Inverter.postUpdate(0)
  Month_Energy_Grid.postUpdate(0)
  Month_Energy_Returned_Grid.postUpdate(0)
end

rule "Month Energy Self Consumption"
when
  System started or
  Item Month_Energy_Inverter changed or
  Item Month_Energy_Grid changed or
  Item Month_Energy_Returned_Grid changed
then
  Month_Energy_Household_Consumption.postUpdate((Month_Energy_Inverter.state as QuantityType<Energy>) +
                                                 (Month_Energy_Grid.state as QuantityType<Energy>) -
                                                 (Month_Energy_Returned_Grid.state as QuantityType<Energy>))
  Month_Energy_Self_Consumption.postUpdate((Month_Energy_Inverter.state as QuantityType<Energy>) -
                                            (Month_Energy_Returned_Grid.state as QuantityType<Energy>))
end

rule "Month Energy Autonomy"
when
  System started or
  Item Month_Energy_Self_Consumption changed or
  Item Month_Energy_Household_Consumption changed or
  Item Month_Energy_Inverter changed
then
  Month_Degree_Of_Autonomy.postUpdate((Month_Energy_Self_Consumption.state as Number).doubleValue /
                                       (Month_Energy_Household_Consumption.state as Number).doubleValue *
                                        100)
  Month_Rate_Self_Consumption.postUpdate((Month_Energy_Self_Consumption.state as Number).doubleValue /
                                          (Month_Energy_Inverter.state as Number).doubleValue *
                                           100)
end


rule "Total Energy Inverter"
when
  Time cron "0/15 * * * * ?" // every 15 seconds
then
  var QuantityType<Energy> Current_Energy_Inverter = 0|Wh
  var QuantityType<Energy> delta_Inverter = 0|Wh
  var QuantityType<Energy> test_energy = 0|Wh

  if ((Energy_Inverter.state != NULL ) && (Energy_Inverter.state != UNDEF))
  {
    Current_Energy_Inverter = Energy_Inverter.state as QuantityType<Energy>
  }

  // Test energy
  if ( (TestInverter_Energy.state != NULL ) && (TestInverter_Energy.state != UNDEF) )
  {
    test_energy = TestInverter_Energy.state as QuantityType<Energy>
  }

  // Ignore the first run, as no delta can yet be calculated
  if(previous_energy_inverter != 0|Wh || test_energy != 0|Wh )
  {

    delta_Inverter = Current_Energy_Inverter - previous_energy_inverter + test_energy
    // Check whether energy meter has been reseted
    if(delta_Inverter > 0|Wh )
    {
      Day_Energy_Inverter.postUpdate( delta_Inverter + Day_Energy_Inverter.state )
      Month_Energy_Inverter.postUpdate( delta_Inverter + Month_Energy_Inverter.state )
    }
  }
  previous_energy_inverter = Current_Energy_Inverter

  // logInfo(logName, "TestInverter_Energy: " + TestInverter_Energy.state)
  // logInfo(logName, "Current_Energy_Inverter: " + Current_Energy_Inverter)
  // logInfo(logName, "delta_Inverter: " + delta_Inverter)
  // logInfo(logName, "Day_Energy_Inverter: " + Day_Energy_Inverter.state)
  // logInfo(logName, "Month_Energy_Inverter: " + Month_Energy_Inverter.state)
end

rule "Total Energy Grid"
when
  Time cron "0/15 * * * * ?" // every 15 seconds
then
  var QuantityType<Energy> Current_Energy_Grid = 0|Wh
  var QuantityType<Energy> delta_grid = 0|Wh
  var QuantityType<Energy> test_energy = 0|Wh

  if ((Energy_Grid.state != NULL ) && (Energy_Grid.state != UNDEF))
  {
    Current_Energy_Grid = Energy_Grid.state as QuantityType<Energy>
  }

  // Test energy
  if ( (TestGrid_Energy.state != NULL ) && (TestGrid_Energy.state != UNDEF) )
  {
    test_energy = TestGrid_Energy.state as QuantityType<Energy>
  }

  // Ignore the first run, as no delta can yet be calculated
  if(previous_energy_grid != 0|Wh || test_energy != 0|Wh )
  {
    delta_grid = Current_Energy_Grid - previous_energy_grid + test_energy
    // Check whether energy meter has been reseted
    if(delta_grid > 0|Wh )
    {
      Day_Energy_Grid.postUpdate( delta_grid + Day_Energy_Grid.state )
      Month_Energy_Grid.postUpdate( delta_grid + Month_Energy_Grid.state )

      if(tariff.state == "LOW")
      {
        Energy_Consumed_Grid_Low_Tariff.postUpdate( delta_grid + Energy_Consumed_Grid_Low_Tariff.state )
      }
      else
      {
        Energy_Consumed_Grid_High_Tariff.postUpdate( delta_grid + Energy_Consumed_Grid_High_Tariff.state )
      }
    }
  }
  previous_energy_grid = Current_Energy_Grid

  // logInfo(logName, "TestGrid_Energy: " + TestGrid_Energy.state)
  // logInfo(logName, "Current_Energy_Grid: " + Current_Energy_Grid)
  // logInfo(logName, "delta_grid: " + delta_grid)
  // logInfo(logName, "Day_Energy_Grid: " + Day_Energy_Grid.state)
  // logInfo(logName, "Month_Energy_Grid: " + Month_Energy_Grid.state)
end

rule "Total Energy Grid Returned"
when
  Time cron "0/15 * * * * ?" // every 15 seconds
then
  var QuantityType<Energy> Current_Returned_Energy_Grid = 0|Wh
  var QuantityType<Energy> delta_grid_returned = 0|Wh
  var QuantityType<Energy> test_energy = 0|Wh

  if ((Returned_Energy_Grid.state != NULL ) && (Returned_Energy_Grid.state != UNDEF))
  {
    Current_Returned_Energy_Grid = Returned_Energy_Grid.state as QuantityType<Energy>
  }

  // Test energy
  if ( (TestGrid_Energy_Returned.state != NULL ) && (TestGrid_Energy_Returned.state != UNDEF) )
  {
    test_energy = TestGrid_Energy_Returned.state as QuantityType<Energy>
  }

  // Ignore the first run, as no delta can yet be calculated
  if(previous_energy_grid_returned != 0|Wh || test_energy != 0|Wh )
  {
    delta_grid_returned = Current_Returned_Energy_Grid - previous_energy_grid_returned + test_energy
    // Check whether energy meter has been reseted
    if(delta_grid_returned >  0|Wh )
    {
      Day_Energy_Returned_Grid.postUpdate( delta_grid_returned + Day_Energy_Returned_Grid.state )
      Month_Energy_Returned_Grid.postUpdate( delta_grid_returned + Month_Energy_Returned_Grid.state )
      
      if(tariff.state == "LOW")
      {
        Energy_Returned_Grid_Low_Tariff.postUpdate( delta_grid_returned + Energy_Returned_Grid_Low_Tariff.state )
      }
      else
      {
        Energy_Returned_Grid_High_Tariff.postUpdate( delta_grid_returned + Energy_Returned_Grid_High_Tariff.state )
      }
    }
  }

  // logInfo(logName, "Current_Returned_Energy_Grid: " + Current_Returned_Energy_Grid)
  // logInfo(logName, "TestGrid_Energy_Returned: " + TestGrid_Energy_Returned.state)
  // logInfo(logName, "previous_energy_grid_returned: " + previous_energy_grid_returned)
  // logInfo(logName, "delta_grid_returned: " + delta_grid_returned)
  // logInfo(logName, "Day_Energy_Returned_Grid: " + Day_Energy_Returned_Grid.state)
  // logInfo(logName, "Month_Energy_Returned_Grid: " + Month_Energy_Returned_Grid.state)

  previous_energy_grid_returned = Current_Returned_Energy_Grid
end
