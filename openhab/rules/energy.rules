val logName = "energy"

var Number previous_energy_inverter
var Number previous_energy_grid
var Number previous_energy_grid_returned

rule "Energy Consumption Startup"
when
  System started
then
  previous_energy_inverter = 0
  previous_energy_grid = 0
  previous_energy_grid_returned = 0

  TestGrid_Energy.sendCommand(0)
  TestGrid_Energy_Returned.sendCommand(0)
  TestInverter_Energy.sendCommand(0)
end

rule "Day Energy Reset"
when
  Item Reset_Day_Energy_Meter changed or
  Time cron "0 0 0 * * ? *" // midnight
then
  Day_Energy_Inverter.sendCommand(0)
  Day_Energy_Grid.sendCommand(0)
  Day_Energy_Returned_Grid.sendCommand(0)
end

rule "Day Energy Self Consumption"
when
  Item Day_Energy_Inverter changed or
  Item Day_Energy_Grid changed or
  Item Day_Energy_Returned_Grid changed
then
  Day_Energy_Household_Consumption.sendCommand((Day_Energy_Inverter.state as Number).doubleValue +
                                               (Day_Energy_Grid.state as Number).doubleValue -
                                               (Day_Energy_Returned_Grid.state as Number).doubleValue)
  Day_Energy_Self_Consumption.sendCommand((Day_Energy_Inverter.state as Number).doubleValue -
                                          (Day_Energy_Returned_Grid.state as Number).doubleValue)

  Day_Degree_Of_Autonomy.sendCommand((Day_Energy_Self_Consumption.state as Number).doubleValue /
                                     (Day_Energy_Household_Consumption.state as Number).doubleValue *
                                      100)
  Day_Rate_Self_Consumption.sendCommand((Day_Energy_Self_Consumption.state as Number).doubleValue /
                                        (Day_Energy_Inverter.state as Number).doubleValue *
                                         100)
end

rule "Month Energy Reset"
when
  Item Reset_Month_Energy_Meter changed or
  Time cron "0 0 0 1 * ? *" // First day of month
then
  Month_Energy_Inverter.sendCommand(0)
  Month_Energy_Grid.sendCommand(0)
  Month_Energy_Returned_Grid.sendCommand(0)
end

rule "Month Energy Self Consumption"
when
  Item Month_Energy_Inverter changed or
  Item Month_Energy_Grid changed or
  Item Month_Energy_Returned_Grid changed
then
  Month_Energy_Household_Consumption.sendCommand((Month_Energy_Inverter.state as Number).doubleValue +
                                                 (Month_Energy_Grid.state as Number).doubleValue -
                                                 (Month_Energy_Returned_Grid.state as Number).doubleValue)
  Month_Energy_Self_Consumption.sendCommand((Month_Energy_Inverter.state as Number).doubleValue -
                                            (Month_Energy_Returned_Grid.state as Number).doubleValue)

  Month_Degree_Of_Autonomy.sendCommand((Month_Energy_Self_Consumption.state as Number).doubleValue /
                                       (Month_Energy_Household_Consumption.state as Number).doubleValue *
                                        100)
  Month_Rate_Self_Consumption.sendCommand((Month_Energy_Self_Consumption.state as Number).doubleValue /
                                          (Month_Energy_Inverter.state as Number).doubleValue *
                                           100)
end


rule "Total Energy Inverter"
when
  Time cron "0/15 * * * * ?" // every 15 seconds
then
  var Number Current_Energy_Inverter = 0
  var Number delta_Inverter = 0

  if ((Energy_Inverter.state != NULL ) && (Energy_Inverter.state != UNDEF))
  {
    Current_Energy_Inverter = Energy_Inverter.state
  }
  if ( (TestInverter_Energy.state != NULL ) && (TestInverter_Energy.state != UNDEF) )
  {
    Current_Energy_Inverter = Current_Energy_Inverter + (TestInverter_Energy.state  as Number).doubleValue
  }

  // Ignore the first run, as no delta can yet be calculated
  if(previous_energy_inverter != 0)
  {
    delta_Inverter = Current_Energy_Inverter - previous_energy_inverter
    // Check whether energy meter has been reseted
    if((delta_Inverter) > 0)
    {
      Day_Energy_Inverter.sendCommand( (Day_Energy_Inverter.state as Number).doubleValue + delta_Inverter )
      Month_Energy_Inverter.sendCommand( (Month_Energy_Inverter.state as Number).doubleValue + delta_Inverter )
    }
  }
  previous_energy_inverter = Current_Energy_Inverter

  // logInfo(logName, "TestInverter_Energy: " + TestInverter_Energy.state)
  // logInfo(logName, "Current_Energy_Inverter: " + Current_Energy_Inverter)
  // logInfo(logName, "delta_Inverter: " + delta_Inverter)
  // logInfo(logName, "Day_Energy_Inverter: " + Day_Energy_Inverter.state)
  // logInfo(logName, "Month_Energy_Inverter: " + Month_Energy_Inverter.state)
end

rule "Total Energy Grid"
when
  Time cron "0/15 * * * * ?" // every 15 seconds
then
  var Number Current_Energy_Grid = 0
  var Number delta_grid = 0

  if ((Energy_Grid.state != NULL ) && (Energy_Grid.state != UNDEF))
  {
    Current_Energy_Grid = Energy_Grid.state
  }
  if ( (TestGrid_Energy.state != NULL ) && (TestGrid_Energy.state != UNDEF) )
  {
    Current_Energy_Grid = Current_Energy_Grid + (TestGrid_Energy.state  as Number).doubleValue
  }

  // Ignore the first run, as no delta can yet be calculated
  if(previous_energy_grid != 0)
  {
    delta_grid = Current_Energy_Grid - previous_energy_grid
    // Check whether energy meter has been reseted
    if((delta_grid) > 0)
    {
      Day_Energy_Grid.sendCommand( (Day_Energy_Grid.state as Number).doubleValue + delta_grid )
      Month_Energy_Grid.sendCommand( (Month_Energy_Grid.state as Number).doubleValue + delta_grid )
    }
  }
  previous_energy_grid = Current_Energy_Grid

  // logInfo(logName, "TestGrid_Energy: " + TestGrid_Energy.state)
  // logInfo(logName, "Current_Energy_Grid: " + Current_Energy_Grid)
  // logInfo(logName, "delta_grid: " + delta_grid)
  // logInfo(logName, "Day_Energy_Grid: " + Day_Energy_Grid.state)
  // logInfo(logName, "Month_Energy_Grid: " + Month_Energy_Grid.state)
end

rule "Total Energy Grid Returned"
when
  Time cron "0/15 * * * * ?" // every 15 seconds
then
  var Number Current_Returned_Energy_Grid = 0
  var Number delta_grid_returned = 0

  if ((Returned_Energy_Grid.state != NULL ) && (Returned_Energy_Grid.state != UNDEF))
  {
    Current_Returned_Energy_Grid = Returned_Energy_Grid.state
  }
  if ( (TestGrid_Energy_Returned.state != NULL ) && (TestGrid_Energy_Returned.state != UNDEF) )
  {
    Current_Returned_Energy_Grid = Current_Returned_Energy_Grid + (TestGrid_Energy_Returned.state  as Number).doubleValue
  }

  // Ignore the first run, as no delta can yet be calculated
  if(previous_energy_grid_returned != 0)
  {
    delta_grid_returned = Current_Returned_Energy_Grid - previous_energy_grid_returned
    if((delta_grid_returned) > 0)
    {
      Day_Energy_Returned_Grid.sendCommand( (Day_Energy_Returned_Grid.state as Number).doubleValue + delta_grid_returned )
      Month_Energy_Returned_Grid.sendCommand( (Month_Energy_Returned_Grid.state as Number).doubleValue + delta_grid_returned )
    }
  }
  previous_energy_grid_returned = Current_Returned_Energy_Grid

  // logInfo(logName, "TestGrid_Energy_Returned: " + TestGrid_Energy_Returned.state)
  // logInfo(logName, "Current_Returned_Energy_Grid: " + Current_Returned_Energy_Grid)
  // logInfo(logName, "delta_grid_returned: " + delta_grid_returned)
  // logInfo(logName, "Day_Energy_Returned_Grid: " + Day_Energy_Returned_Grid.state)
  // logInfo(logName, "Month_Energy_Returned_Grid: " + Month_Energy_Returned_Grid.state)
end
