val logName = "energy"

var QuantityType<Energy> previous_energy_inverter = 0|Wh
var QuantityType<Energy> previous_energy_grid = 0|Wh
var QuantityType<Energy> previous_energy_grid_returned = 0|Wh

rule "Energy Consumption Startup"
when
  System started
then
  if (TestGrid_Energy.state == NULL ) TestGrid_Energy.postUpdate(0)
  if (TestGrid_Energy_Returned.state == NULL ) TestGrid_Energy_Returned.postUpdate(0)
  if (TestInverter_Energy.state == NULL ) TestInverter_Energy.postUpdate(0)

  if (Energy_Inverter.state == NULL ) Energy_Inverter.postUpdate(0)
  if (Energy_Inverter_Midnight.state == NULL ) Energy_Inverter_Midnight.postUpdate(0)
  if (Energy_Inverter_Month.state == NULL ) Energy_Inverter_Month.postUpdate(0)

  if (Energy_Grid.state == NULL ) Energy_Grid.postUpdate(0)
  if (Energy_Grid_Midnight.state == NULL ) Energy_Grid_Midnight.postUpdate(0)
  if (Energy_Grid_Month.state == NULL ) Energy_Grid_Month.postUpdate(0)

  if (Energy_Returned_Grid.state == NULL ) Energy_Returned_Grid.postUpdate(0)
  if (Energy_Returned_Grid_Midnight.state == NULL ) Energy_Returned_Grid_Midnight.postUpdate(0)
  if (Energy_Returned_Grid_Month.state == NULL ) Energy_Returned_Grid_Month.postUpdate(0)

  if (Energy_Household_Consumption.state == NULL ) Energy_Household_Consumption.postUpdate(0)
  if (Energy_Self_Consumption.state == NULL ) Energy_Self_Consumption.postUpdate(0)

  if (Day_Energy_Inverter.state == NULL ) Day_Energy_Inverter.postUpdate(0)
  if (Day_Energy_Grid.state == NULL ) Day_Energy_Grid.postUpdate(0)
  if (Day_Energy_Returned_Grid.state == NULL ) Day_Energy_Returned_Grid.postUpdate(0)
  if (Day_Energy_Household_Consumption.state == NULL ) Day_Energy_Household_Consumption.postUpdate(0)
  if (Day_Energy_Self_Consumption.state == NULL ) Day_Energy_Self_Consumption.postUpdate(0)
  if (Day_Degree_Of_Autonomy.state == NULL ) Day_Degree_Of_Autonomy.postUpdate(0)
  if (Day_Rate_Self_Consumption.state == NULL ) Day_Rate_Self_Consumption.postUpdate(0)

  if (Month_Energy_Inverter.state == NULL ) Month_Energy_Inverter.postUpdate(0)
  if (Month_Energy_Grid.state == NULL ) Month_Energy_Grid.postUpdate(0)
  if (Month_Energy_Returned_Grid.state == NULL ) Month_Energy_Returned_Grid.postUpdate(0)
  if (Month_Energy_Household_Consumption.state == NULL ) Month_Energy_Household_Consumption.postUpdate(0)
  if (Month_Energy_Self_Consumption.state == NULL ) Month_Energy_Self_Consumption.postUpdate(0)
  if (Month_Degree_Of_Autonomy.state == NULL ) Month_Degree_Of_Autonomy.postUpdate(0)
  if (Month_Rate_Self_Consumption.state == NULL ) Month_Rate_Self_Consumption.postUpdate(0)

  if (Energy_Returned_Grid_Low_Tariff.state == NULL ) Energy_Returned_Grid_Low_Tariff.postUpdate(0)
  if (Energy_Returned_Grid_High_Tariff.state == NULL ) Energy_Returned_Grid_High_Tariff.postUpdate(0)
  if (Energy_Consumed_Grid_Low_Tariff.state == NULL ) Energy_Consumed_Grid_Low_Tariff.postUpdate(0)
  if (Energy_Consumed_Grid_High_Tariff.state == NULL ) Energy_Consumed_Grid_High_Tariff.postUpdate(0)
  if (received_money_returned_grid.state == NULL ) received_money_returned_grid.postUpdate(0)
  if (paid_money_consumption_grid.state == NULL ) paid_money_consumption_grid.postUpdate(0)
end

rule "Tariff Counter Reset"
when
  Item Reset_Tariff_Energy_Meter changed
then
  Energy_Returned_Grid_Low_Tariff.postUpdate(0)
  Energy_Returned_Grid_High_Tariff.postUpdate(0)
  Energy_Consumed_Grid_Low_Tariff.postUpdate(0)
  Energy_Consumed_Grid_High_Tariff.postUpdate(0)
  received_money_returned_grid.postUpdate(0)
  paid_money_consumption_grid.postUpdate(0)
end

rule "Day Energy Counter Reset"
when
  Item Reset_Day_Energy_Meter changed or
  Time cron "0 0 0 * * ? *" // midnight
then
  Energy_Inverter_Midnight.postUpdate(Energy_Inverter.state)
  Energy_Grid_Midnight.postUpdate(Energy_Grid.state)
  Energy_Returned_Grid_Midnight.postUpdate(Energy_Returned_Grid.state)
end

rule "Month Energy Counter Reset"
when
  Item Reset_Month_Energy_Meter changed or
  Time cron "0 0 0 1 * ? *" // First day of month
then
  Energy_Inverter_Month.postUpdate(Energy_Inverter.state)
  Energy_Grid_Month.postUpdate(Energy_Grid.state)
  Energy_Returned_Grid_Month.postUpdate(Energy_Returned_Grid.state)
end

rule "Continous Energy Calculation"
when
  Item Energy_Inverter changed or
  Item Energy_Grid changed or
  Item Energy_Returned_Grid changed
then
  Energy_Household_Consumption.postUpdate( ( Energy_Inverter.state as QuantityType<Energy> ) +
                                           ( Energy_Grid.state as QuantityType<Energy> ) -
                                           ( Energy_Returned_Grid.state as QuantityType<Energy> ))

  Energy_Self_Consumption.postUpdate( ( Energy_Inverter.state as QuantityType<Energy> ) -
                                      ( Energy_Returned_Grid.state as QuantityType<Energy> ))
end

rule "Day Energy Calculation"
when
  Item Energy_Inverter changed or
  Item Energy_Grid changed or
  Item Energy_Returned_Grid changed
then
  var QuantityType<Energy> day_energy_inverter = ( Energy_Inverter.state as QuantityType<Energy> ) -
                                                 ( Energy_Inverter_Midnight.state as QuantityType<Energy> )

  var QuantityType<Energy> day_energy_grid = ( Energy_Grid.state as QuantityType<Energy> ) -
                                             ( Energy_Grid_Midnight.state as QuantityType<Energy> )

  var QuantityType<Energy> day_energy_returned_grid = ( Energy_Returned_Grid.state as QuantityType<Energy> ) -
                                                      ( Energy_Returned_Grid_Midnight.state as QuantityType<Energy> )

  Day_Energy_Inverter.postUpdate( day_energy_inverter )
  Day_Energy_Grid.postUpdate( day_energy_grid )
  Day_Energy_Returned_Grid.postUpdate( day_energy_returned_grid )

  Day_Energy_Household_Consumption.postUpdate( day_energy_inverter +
                                               day_energy_grid -
                                               day_energy_returned_grid)

  Day_Energy_Self_Consumption.postUpdate( day_energy_inverter -
                                          day_energy_returned_grid)
end

rule "Month Energy Calculation"
when
  Item Energy_Inverter changed or
  Item Energy_Grid changed or
  Item Energy_Returned_Grid changed
then
  var QuantityType<Energy> month_energy_inverter = ( Energy_Inverter.state as QuantityType<Energy> ) -
                                                 ( Energy_Inverter_Month.state as QuantityType<Energy> )

  var QuantityType<Energy> month_energy_grid = ( Energy_Grid.state as QuantityType<Energy> ) -
                                             ( Energy_Grid_Month.state as QuantityType<Energy> )

  var QuantityType<Energy> month_energy_returned_grid = ( Energy_Returned_Grid.state as QuantityType<Energy> ) -
                                                      ( Energy_Returned_Grid_Month.state as QuantityType<Energy> )

  Month_Energy_Inverter.postUpdate( month_energy_inverter )
  Month_Energy_Grid.postUpdate( month_energy_grid )
  Month_Energy_Returned_Grid.postUpdate( month_energy_returned_grid )

  Month_Energy_Household_Consumption.postUpdate( month_energy_inverter +
                                               month_energy_grid -
                                               month_energy_returned_grid)

  Month_Energy_Self_Consumption.postUpdate( month_energy_inverter -
                                          month_energy_returned_grid)
end

rule "Day Energy Autonomy"
when
  Item Day_Energy_Self_Consumption changed or
  Item Day_Energy_Household_Consumption changed
then
  Day_Degree_Of_Autonomy.postUpdate((Day_Energy_Self_Consumption.state as Number).doubleValue /
                                     (Day_Energy_Household_Consumption.state as Number).doubleValue *
                                      100)
  Day_Rate_Self_Consumption.postUpdate((Day_Energy_Self_Consumption.state as Number).doubleValue /
                                        (Day_Energy_Inverter.state as Number).doubleValue *
                                         100)
end

rule "Month Energy Autonomy"
when
  Item Month_Energy_Self_Consumption changed or
  Item Month_Energy_Household_Consumption changed
then
  Month_Degree_Of_Autonomy.postUpdate((Month_Energy_Self_Consumption.state as Number).doubleValue /
                                       (Month_Energy_Household_Consumption.state as Number).doubleValue *
                                        100)
  Month_Rate_Self_Consumption.postUpdate((Month_Energy_Self_Consumption.state as Number).doubleValue /
                                          (Month_Energy_Inverter.state as Number).doubleValue *
                                           100)
end


rule "Total Energy Inverter"
when
  Time cron "0/15 * * * * ?" // every 15 seconds
then
  var QuantityType<Energy> Current_Energy_Inverter = 0|Wh
  var QuantityType<Energy> delta_Inverter = 0|Wh
  var QuantityType<Energy> test_energy = 0|Wh

  if ((Shelly_Energy_Inverter.state != NULL ) && (Shelly_Energy_Inverter.state != UNDEF))
  {
    // Shelly Addon Bug
    // Workaround = Calculate Energy out of Power (in rule intervall)
    // --- Start workaround ----
    //Current_Energy_Inverter = Shelly_Energy_Inverter.state as QuantityType<Energy>
    Current_Energy_Inverter = Shelly_Current_Power_Total_Inverter.state as QuantityType<Power> * 1|h / -240
    if(Current_Energy_Inverter > 0|Wh )
    {
      Current_Energy_Inverter = previous_energy_inverter + Current_Energy_Inverter
    }
    else
    {
      Current_Energy_Inverter = previous_energy_inverter
    }
    // --- End workaround ----
  }

  // Test energy
  if ( (TestInverter_Energy.state != NULL ) && (TestInverter_Energy.state != UNDEF) )
  {
    test_energy = TestInverter_Energy.state as QuantityType<Energy>
  }

  // Ignore the first run, as no delta can yet be calculated
  if(previous_energy_inverter != 0|Wh || test_energy != 0|Wh )
  {

    delta_Inverter = Current_Energy_Inverter - previous_energy_inverter + test_energy
    // Check whether energy meter has been reseted
    if(delta_Inverter > 0|Wh )
    {
      Energy_Inverter.postUpdate( delta_Inverter + Energy_Inverter.state )
    }
  }
  previous_energy_inverter = Current_Energy_Inverter

  // logInfo(logName, "TestInverter_Energy: " + TestInverter_Energy.state)
  // logInfo(logName, "Current_Energy_Inverter: " + Current_Energy_Inverter)
  // logInfo(logName, "delta_Inverter: " + delta_Inverter)
  // logInfo(logName, "Energy_Inverter: " + Energy_Inverter.state)
end

rule "Total Energy Grid"
when
  Time cron "0/15 * * * * ?" // every 15 seconds
then
  var QuantityType<Energy> Current_Energy_Grid = 0|Wh
  var QuantityType<Energy> delta_grid = 0|Wh
  var QuantityType<Energy> test_energy = 0|Wh

  if ((Shelly_Energy_Grid.state != NULL ) && (Shelly_Energy_Grid.state != UNDEF))
  {
    // Shelly Addon Bug
    // Workaround = Calculate Energy out of Power (in rule intervall)
    // Current_Energy_Grid = Shelly_Energy_Grid.state as QuantityType<Energy>
    // --- Start workaround ----
    Current_Energy_Grid = Shelly_Current_Power_Total_Grid.state as QuantityType<Power> * 1|h / 240
    if(Current_Energy_Grid > 0|Wh )
    {
      Current_Energy_Grid = previous_energy_grid + Current_Energy_Grid
    }
    else
    {
      Current_Energy_Grid = previous_energy_grid
    }
    // --- End workaround ----
  }

  // Test energy
  if ( (TestGrid_Energy.state != NULL ) && (TestGrid_Energy.state != UNDEF) )
  {
    test_energy = TestGrid_Energy.state as QuantityType<Energy>
  }

  // Ignore the first run, as no delta can yet be calculated
  if(previous_energy_grid != 0|Wh || test_energy != 0|Wh )
  {
    delta_grid = Current_Energy_Grid - previous_energy_grid + test_energy
    // Check whether energy meter has been reseted
    if(delta_grid > 0|Wh )
    {
      Energy_Grid.postUpdate( delta_grid + Energy_Grid.state )

      var deltaMoney = (kWh_price_consumption_grid.state as Number).doubleValue * delta_grid / 1000
      paid_money_consumption_grid.postUpdate((paid_money_consumption_grid.state as Number).doubleValue + deltaMoney)

      if(tariff.state == "LOW")
      {
        Energy_Consumed_Grid_Low_Tariff.postUpdate( delta_grid + Energy_Consumed_Grid_Low_Tariff.state )
      }
      else
      {
        Energy_Consumed_Grid_High_Tariff.postUpdate( delta_grid + Energy_Consumed_Grid_High_Tariff.state )
      }
    }
  }
  previous_energy_grid = Current_Energy_Grid

  // logInfo(logName, "Shelly_Current_Power_Total_Grid: " + Shelly_Current_Power_Total_Grid.state)
  // logInfo(logName, "TestGrid_Energy: " + TestGrid_Energy.state)
  // logInfo(logName, "Current_Energy_Grid: " + Current_Energy_Grid)
  // logInfo(logName, "delta_grid: " + delta_grid)
  // logInfo(logName, "Energy_Grid: " + Energy_Grid.state)
end

rule "Total Energy Grid Returned"
when
  Time cron "0/15 * * * * ?" // every 15 seconds
then
  var QuantityType<Energy> Current_Returned_Energy_Grid = 0|Wh
  var QuantityType<Energy> delta_grid_returned = 0|Wh
  var QuantityType<Energy> test_energy = 0|Wh

  if ((Shelly_Returned_Energy_Grid.state != NULL ) && (Shelly_Returned_Energy_Grid.state != UNDEF))
  {
    // Shelly Addon Bug
    // Workaround = Calculate Energy out of Power (in rule intervall)
    // Current_Returned_Energy_Grid = Shelly_Returned_Energy_Grid.state as QuantityType<Energy>
    // --- Start workaround ----
    Current_Returned_Energy_Grid = Shelly_Current_Power_Total_Grid.state as QuantityType<Power> * 1|h / -240
    if(Current_Returned_Energy_Grid > 0|Wh )
    {
      Current_Returned_Energy_Grid = previous_energy_grid_returned + Current_Returned_Energy_Grid
    }
    else
    {
      Current_Returned_Energy_Grid = previous_energy_grid_returned
    }
    // --- End workaround ----
  }

  // Test energy
  if ( (TestGrid_Energy_Returned.state != NULL ) && (TestGrid_Energy_Returned.state != UNDEF) )
  {
    test_energy = TestGrid_Energy_Returned.state as QuantityType<Energy>
  }

  // Ignore the first run, as no delta can yet be calculated
  if(previous_energy_grid_returned != 0|Wh || test_energy != 0|Wh )
  {
    delta_grid_returned = Current_Returned_Energy_Grid - previous_energy_grid_returned + test_energy
    // Check whether energy meter has been reseted
    if(delta_grid_returned >  0|Wh )
    {
      Energy_Returned_Grid.postUpdate( delta_grid_returned + Energy_Returned_Grid.state )
      
      var deltaMoney = (kWh_price_returned_grid.state as Number).doubleValue * delta_grid_returned / 1000
      received_money_returned_grid.postUpdate((received_money_returned_grid.state as Number).doubleValue + deltaMoney)

      if(tariff.state == "LOW")
      {
        Energy_Returned_Grid_Low_Tariff.postUpdate( delta_grid_returned + Energy_Returned_Grid_Low_Tariff.state )
      }
      else
      {
        Energy_Returned_Grid_High_Tariff.postUpdate( delta_grid_returned + Energy_Returned_Grid_High_Tariff.state )
      }
    }
  }
  previous_energy_grid_returned = Current_Returned_Energy_Grid

  // logInfo(logName, "Current_Returned_Energy_Grid: " + Current_Returned_Energy_Grid)
  // logInfo(logName, "TestGrid_Energy_Returned: " + TestGrid_Energy_Returned.state)
  // logInfo(logName, "previous_energy_grid_returned: " + previous_energy_grid_returned)
  // logInfo(logName, "delta_grid_returned: " + delta_grid_returned)
end
