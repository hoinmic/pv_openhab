val logName = "solarTimeOfDay"

var ZonedDateTime sunRise = null
var ZonedDateTime daylight = null
var ZonedDateTime middaySun = null
var ZonedDateTime afternoonSun = null
var ZonedDateTime eveningSun = null
var ZonedDateTime sunSet = null

var String previousTimeOfDay = "NIGHT"
var String weekend = "false"

rule "times of this day startup"
when
  System started
then
  timeOfDay.postUpdate(previousTimeOfDay)
end

rule "timeOfDay Calculate the times of this day"
when
  System started or // run at system start in case the time changed when OH was offline
  Time cron "0 3 0 * * ? *" // three minutes after midnight, to give Astro time to calculate the new day's times
then
  // Convert the Astro Items to ZonedDateTime
  sunRise = (sunrise_Time.state as DateTimeType).getZonedDateTime()
  daylight = sunRise.plusHours(1)
  sunSet = (sunset_Time.state as DateTimeType).getZonedDateTime()
  eveningSun = sunSet.minusHours(1)

  // Jump to tomorrow and subtract to avoid problems (summer time / winter time)
  middaySun = now.withHour(0).withMinute(0).withSecond(0).plusDays(1).minusHours(24).plusHours(11)
  afternoonSun = now.withHour(0).withMinute(0).withSecond(0).plusDays(1).minusHours(24).plusHours(12)

  // Publish the current state
  logInfo(logName, "Calculated sun rise: " + sunRise)
  logInfo(logName, "Calculated daylight: " + daylight)
  logInfo(logName, "Calculated midday sun: " + middaySun)
  logInfo(logName, "Calculated afternoon sun: " + afternoonSun)
  logInfo(logName, "Calculated evening sun: " + eveningSun)
  logInfo(logName, "Calculated sun set: " + sunSet)

  // working day or weekend
  val String currentDay = now.getDayOfWeek.toString()
  logInfo(logName, "Current Day: " + currentDay)
  weekend = "false"
  if((currentDay == "SATURDAY") || (currentDay == "SUNDAY"))
  {
    weekend = "true"
  }
  logInfo(logName, "Weekend: " + weekend)
end

rule "timeOfDay Define the current time segment" 
when
  Time cron "0 0/1 * * * ?"   // every minute
then
  // Define the current time segment
  // MIDDAY_SUN <- during this time the food preparation takes place (not on weekend)
  var String currentTimeOfDay = "NIGHT"
  val currentTime = ZonedDateTime.now()
  if (currentTime.isAfter(sunRise) && currentTime.isBefore(daylight)) { currentTimeOfDay = "SUN_RISE" }
  if (currentTime.isAfter(daylight) && currentTime.isBefore(middaySun)) { currentTimeOfDay = "MORNING_SUN" }
  if (currentTime.isAfter(middaySun) && currentTime.isBefore(afternoonSun) && (weekend == "true")) { currentTimeOfDay = "MORNING_SUN" }
  if (currentTime.isAfter(middaySun) && currentTime.isBefore(afternoonSun) && (weekend == "false")) { currentTimeOfDay = "MIDDAY_SUN" }
  if (currentTime.isAfter(afternoonSun) && currentTime.isBefore(eveningSun)) { currentTimeOfDay = "AFTERNOON_SUN" }
  if (currentTime.isAfter(eveningSun) && currentTime.isBefore(sunSet)) { currentTimeOfDay = "EVENING_SUN" }

  if(previousTimeOfDay != currentTimeOfDay)
  {
    // Publish the updated state
    logInfo(logName, "Time of day: " + currentTimeOfDay)
    timeOfDay.postUpdate(currentTimeOfDay)
  } 
  previousTimeOfDay = currentTimeOfDay
end
