uid: fronius_pv_gauge
tags:
  - energy
  - fronius
  - solar
props:
  parameters:
    - default: "15000"
      description: Maximum power in Watts.
      label: Maximum Power
      name: max_power
      required: false
      type: INTEGER
      min: 1
    - context: item
      description: Current power in Watts.
      label: Power
      name: power
      required: false
      type: TEXT
    - default: "100"
      description: The size of the widget.
      label: Widget size
      name: size
      required: false
      type: INTEGER
      groupName: design
      advanced: true
    - default: "0.68"
      description: "Exponent for the scale (default: 0.68; 1=linear, reasonable values
        range from 0.5 to 2)"
      label: Exponent
      name: exponent
      required: false
      groupName: design
      advanced: true
    - default: pv
      description: Icon for the widget. The icon selection determines the base color
        for the widget as well.
      label: Icon
      name: icon
      required: false
      type: TEXT
      groupName: design
      advanced: true
      limitToOptions: true
      options:
        - label: PV
          value: pv
        - label: Load
          value: consumption
  parameterGroups:
    - name: design
      label: Design elements
      description: Group of parameters which determine the visual appearance of the widget.
timestamp: Aug 10, 2024, 7:12:09 PM
component: f7-block
config:
  comment: This component determines the size of the widget.
  style:
    height: =props.size + "px"
    padding: 0px
    width: =props.size + "px"
slots:
  default:
    - component: oh-context
      config:
        comment: "'arc_flag' determines which arc should be drawn (short or long).
          'scale_to_deg' makes sure the input value does not exceed to max_power
          and scales everything to 270Â°. 'switch_color' handles power less than
          1 and sets the color dependent on the icon selected, based on the
          dictionary in the function. 'to_cartesian' converts degree to
          cartesian coordinates to be used by arc."
        functions:
          arc_flag: "=(degree) => degree < 180 ? 0 : 1"
          scale_to_deg: =(value) => Math.pow(Math.min(Math.abs(value), props.max_power) *
            (270 / props.max_power), props.exponent) * (270 / Math.pow(270,
            props.exponent))
          switch_color: '=(value) => (Math.abs(value) >= 1) ? {"pv": "#f7c002",
            "consumption": "#70afcd"}[props.icon] : "grey"'
          to_cartesian: =(degree) => (50 + Math.sin(degree * Math.PI / 180) * 41) + " " +
            (50 - Math.cos(degree * Math.PI / 180) * 41)
      slots:
        default:
          - component: svg
            config:
              comment: The component scales freely to the size of its parent.
              height: 100%
              viewBox: 0 0 100 100
              width: 100%
            slots:
              default:
                - component: circle
                  config:
                    comment: Outer ring. The stroke color uses the base color with less opacity.
                    cx: 50px
                    cy: 50px
                    fill: white
                    r: 49.5px
                    style:
                      stroke: =fn.switch_color(#props.power)
                      stroke-opacity: 0.4
                      stroke-width: 1px
                - component: path
                  config:
                    comment: Background of the dial. The stroke color uses the base color with less
                      opacity.
                    cx: 50px
                    cy: 50px
                    d: M50 9 A41 41 0 1 1 9 50
                    fill: rgba(0, 0, 0, 0)
                    r: 41px
                    style:
                      stroke: =fn.switch_color(#props.power)
                      stroke-opacity: 0.4
                      stroke-width: 14px
                - component: circle
                  config:
                    comment: Inner ring. The stroke color uses the base color with less opacity.
                    cx: 50px
                    cy: 50px
                    fill: rgba(0, 0, 0, 0)
                    r: 32.5px
                    style:
                      stroke: =fn.switch_color(#props.power)
                      stroke-opacity: 0.4
                      stroke-width: 1px
                - component: path
                  config:
                    comment: Dial, using an exponential scale. If the value exceeds max_power, the
                      color dial turns red.
                    d: =`M50 9 A41 41 0 ${fn.arc_flag(fn.scale_to_deg(Math.abs(#props.power)))} 1
                      ${fn.to_cartesian(fn.scale_to_deg(Math.abs(#props.power)))}`
                    fill: rgba(0, 0, 0, 0)
                    style:
                      stroke: '=(Math.abs(#props.power) < props.max_power) ?
                        fn.switch_color(#props.power) : "#f70202"'
                      stroke-width: 14px
                - component: path
                  config:
                    comment: Path for numerical display of input value.
                    d: M9,50 A41 41 0 0 1 50 9
                    fill: rgba(0, 0, 0, 0)
                    id: pv_text_path
                - component: text
                  config:
                    style:
                      dominant-baseline: central
                      fill: rgb(127, 127, 127)
                      font-family: sans-serif
                      font-size: 10px
                      letter-spacing: 1px
                      text-anchor: middle
                  slots:
                    default:
                      - component: textPath
                        config:
                          content: "=Math.abs(#props.power) > 999 ? `${(#props.power / 1000).toFixed(2)}
                            kW` : `${Math.round(#props.power) | 0} W`"
                          startOffset: 50%
                          xlink:href: "#pv_text_path"
                - component: image
                  config:
                    comment: Icons pv.svg and consumption.svg have to be present in /icons/classic/.
                    height: 44px
                    width: 44px
                    x: 28px
                    xlink:href: =`/icon/${props.icon}?format=svg&anyFormat=true&iconset=classic`
                    y: 28px
                - component: oh-repeater
                  config:
                    comment: Draws the segments of the dial, using an exponential scale.
                    for: degree
                    fragment: true
                    rangeStart: 0
                    rangeStep: 13.5
                    rangeStop: 270
                    sourceType: range
                  slots:
                    default:
                      - component: line
                        config:
                          style:
                            stroke: white
                            stroke-width: 1px
                            transform: ="rotate(" + (Math.pow(loop.degree, props.exponent) * 270 /
                              Math.pow(270, props.exponent)) + "deg)"
                            transform-origin: center
                          x1: 50px
                          x2: 50px
                          y1: 2px
                          y2: 16px
